
[Firebase Cli]

파이어 베이스 CLI를 통해 클라이언트 사이드가 아닌 서버사이드에서 일어나야 하는 작업을 설정할 수 있습니다. 

먼저 Firebase CLI를 설치하고 나면 functions라는 폴더가 생성되고, 그 안의 index.js 파일 안에서 이를 제어하기 위한 코드를 넣을 수 있습니다.

앱을 초기화 하고, 클라이언트 사이드에서 사용할 함수를 이 파일 안에서 생성한 다음 export 합니다.

onCall 은 해당 함수가 실행되었을 때 어떤 로직을 실행시킬지를 설정하는 것입니다. data는 우리가 보낼 데이터를 가리킵니다. context 는 지금의 유저의 권한 정보를 담고 있습니다.

export 할 코드를 다 완성 했으면, CLI 상에서 functions을 deploy 해줘야 합니다. 이러면 파이어베이스 상에 해당 function이 담기고, 클라이언트 사이드에서 해당 function이 실행될 것을 요청했을 때, 파이어베이스 서버사이드에서 해당 function이 실행됩니다.




[ 데이터 베이스 스키마 ]

- 다대 다는 필드 이름에 s 를 붙여서 표현 < - 배열로, 그리고 다대 다에는 그에 매칭되는 또 다른 루트 컬렉션이 있어야 함

<users Collection>

uid(primary)
name
email
role
team <- team Collection
messageRooms <- messageRooms Collection
messages <- messages Collection
projects <- projects Collection
plans <- plans Collection
posts <- posts Collection



<teams Collection>
teamId(primary)
members <- users Collection
teamName
teamDesc


<projects Collection>

projectName
teamName <- teams Collection
messageRoom <- messageRoom Collection
plans <- plans Collection

<posts Collection>



<forum Collection>

authorName, authorRole, authorTeam <-users
title
text
comments <- 빈 배열, 읽는 이가 넣도록 설계
category <- 빈 배열, 작성자가 넣도록 설계
reviewNumber < - 이건 안 넣어도 될 것 같다 사실. 그것보다는 읽음 여부를 구현해야 할 듯 한데
date


<forum Page>
클릭하면 해당 페이지로 들어갈 수 있게 끔.
추가 버튼을 누르면 위지윅 없는 form 페이지로 넘어가서 글을 쓸 수 있도록
이때 nuxt의 generate를 고려해야 하므로 form 페이지는 그냥 컴포넌트를 껐다 키는 것으로 구현 
써진 글이 페이지를 생성할 수 있도록



일단 전체적인 데이터 스키마를 짜고 앱을 만들어야겠다. 나중에 되돌아 가는 등
비효율이 심할 듯


팀이 없다면 none 팀으로










[[ Nuxt ]]

< 미들웨어 >

미들웨어는 라우트가 로드 되기 전에 실행되는 함수를 의미합니다.
이 함수에서는 context 를 매개변수로 받을 수 있습니다.

미들웨어는 서버사이드에서도, 클라이언트 사이드에서도 동작합니다.


